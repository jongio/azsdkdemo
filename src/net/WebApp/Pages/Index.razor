@page "/"
@inject ApiServiceClient ApiServiceClient;
@inject FunctionsServiceClient FunctionsServiceClient;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="container" style="margin-bottom:10px">
    <div class="row text-center">
        <div class="col-12">
            <img src=imgs/logo.png height="94" width="773" alt="Memealyzer" style="margin-bottom: 10px;" class="img-fluid" />
        </div>
        <div class="col-12">
            <div class="form-row">
                <div class="col col-6">
                    <EditForm OnValidSubmit="HandleAddFormSubmit" Model="@image">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <button type="submit" value="submit" disabled="@(!IsConnected)" class="btn shadow-none" style="cursor:pointer"><span style="font-size: 18px" class="oi oi-plus" title="Add Meme"
                                aria-hidden="true"></span></button>
                    </EditForm>
                </div>
                <div class="col col-6">
                    <button disabled="@(!IsConnected)" class="btn shadow-none btn-@streaming" @onclick="ToggleStream" style="cursor:pointer"><span style="font-size: 22px" class="oi oi-infinity" title="Meme Stream"
                            aria-hidden="true"></span></button>
                </div>
            </div>

        </div>
    </div>
</div>

@if (images == null)
{
    <div class="container">
        <div class="row text-center">
            <div class="col-md-12">
                <div class="spinner-grow" role="status">
                    <span class="sr-only">Loading memes...</span>
                </div>
                <p>Loading memes...</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row text-center text-lg-left">
            @foreach (var image in images)
            {
                <div class="col-md-4" @key="image">
                    <div class="card" style="width: 100%;margin-bottom:5px;">
                        <img class="card-img-top border border-8 border-@image.Color img-thumbnail" style="border-style: @borderStyle !important" src="@image.BlobUri" alt="">
                        <div class="card-body">
                            <p class="card-text">@image.Text</p>
                            <p class="card-text">@image.Status</p>
                            <div class="text-right">
                                <button type="submit" value="submit" disabled="@(String.IsNullOrEmpty(image.Sentiment))" class="btn"
                                    @onclick="@(async () => await DeleteImage(image.Id))"><span style="font-size: 12px" class="oi oi-trash" title="Delete Meme"
                                        aria-hidden="true"></span></button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<Image> images;
    private Image image = new Image();
    private HubConnection hubConnection;
    private string borderStyle;
    private bool streaming = false;
    private Timer timer;

    protected override async Task OnInitializedAsync()
    {
        borderStyle = await ApiServiceClient.GetBorderStyle();
        images = await ApiServiceClient.GetImages();
        hubConnection = FunctionsServiceClient.GetHubConnection();

        hubConnection.On<Image>("ReceiveImage", (image) =>
        {
            int index = FindImageById(image.Id);
            if (index >= 0)
            {
                images[index] = image;
            }
            else
            {
                images.Insert(0, image);
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private int FindImageById(string id)
    {
        return images.FindIndex(0, f => string.Compare(f.Id, id, true) == 0);
    }

    private async Task HandleAddFormSubmit()
    {
        await PostImageAsync();
    }

    private async Task PostImageAsync()
    {
        Image postedImage = new Image { Id = Guid.NewGuid().ToString() };
        
        try {
            postedImage = await ApiServiceClient.PostImage(postedImage);
            if(postedImage != null) {
                images.Insert(0, postedImage);
            }
        }
        catch(Exception x) {
            Console.WriteLine(x);
        }
    }

    private void ToggleStream(MouseEventArgs e)
    {
        streaming = !streaming;
        if (streaming)
        {
            timer = new Timer(async (object stateInfo) =>
            {
                await PostImageAsync();
                StateHasChanged();
            }, new AutoResetEvent(false), 0, 5000);
        }
        else
        {
            if (timer != null)
            {
                timer.Dispose();
                timer = null;
            }
        }
    }

    public async Task DeleteImage(string id)
    {
        int index = FindImageById(id);
        Console.WriteLine(index);
        if (index >= 0)
        {
            images.RemoveAt(index);
        }
        StateHasChanged();
        var deletedImage = await ApiServiceClient.DeleteImage(id);
    }

    public bool IsConnected =>
        hubConnection != null && hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}